image:
  repository: target/vela-server
  tag: v0.12.1
  pullPolicy: IfNotPresent

## If you need to pull images from a private Docker image repository, pass in the name
## of a Kubernetes Secret that contains the needed secret. For more details, see:
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
##
imagePullSecrets: []
# - name: "image-pull-secret"

## For small or experimental deployments of the Vela server, 1 replica will suffice.
## For production cases, 2-3 are recommended. This does not grant additional parallelism,
## but does ensure that upgrades, config changes, and disruptions are handled more gracefully.
replicaCount: 1

nameOverride: ""
fullnameOverride: ""

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

## If you need to run vela-server under a specific kubernetes service account, pass in
## the name and any annotations here.
## If you need the service account created, set create: to true
## Annotations are added to service account only when create: true.
serviceAccount:
  name: default
  create: false
  annotations: {}
  # Fallback image pull secret.
  # If a pod does not have pull secrets, k8s will use the service account's pull secrets.
  # See: https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/#serviceaccount-admission-controller
  # pullSecret: "your-pull-secret"

## Add extra annotations to the Vela server deployment here.
deploymentAnnotations: {}

## Add extra annotations to the Vela server pods here. See below example for
## Prometheus scrape annotations.
##
podAnnotations: {}
#  prometheus.io/scrape: "true"
#  prometheus.io/port: "80"

## Add extra labels to the Vela server pods here.
podLabels: {}

updateStrategy: {}

service:
  type: ClusterIP
  port: 80
  annotations: {}

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - "/"
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

## If you'd like to force the Vela server to run on a specific node or set of nodes,
## set a selector here.
##
nodeSelector: {}

tolerations: []

affinity: {}

## DNS settings (dnsPolicy, dnsConfig)

## https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
## "ClusterFirst" is the default. Other options: "Default", "ClusterFirstWithHostNet", "None"
#dnsPolicy: "ClusterFirst"
## https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-dns-config
dnsConfig: {}
  # example copied from the docs
  #nameservers:
  #- 1.2.3.4
  #searches:
  #- ns1.svc.cluster-domain.example
  #- my.dns.search.suffix
  #options:
  #- name: ndots
  #  value: "2"
  #- name: edns0

## If you'd like to make additional files or volumes available to vela-server, declare additional
## Volumes here per the Pod spec's "volumes" section.
## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
##
extraVolumes: []
## If you have declared extra volumes, mount them here, per the Pod Container's
## "volumeMounts" section.
##
extraVolumeMounts: []

persistentVolume:
  ## If you are using SQLite as your DB for Vela, it is recommended to enable persistence. If
  ## enabled, the Chart will create a PersistentVolumeClaim to store its state in. If you are
  ## using a DB other than SQLite, set this to false to avoid allocating unused storage.
  ## If set to false, Vela will use an emptyDir instead, which is ephemeral.
  ##
  enabled: true

  ## Vela server data Persistent Volume access modes
  ## Must match those of existing PV or dynamic provisioner
  ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  accessModes:
    # all nodes need access to the sqlite db
    - ReadWriteMany

  ## Vela server data Persistent Volume annotations
  ##
  annotations: {}

  ## If you'd like to bring your own PVC for persisting Vela state, pass the name of the
  ## created + ready PVC here. If set, this Chart will not create the default PVC.
  ## Requires server.persistentVolume.enabled: true
  ##
  existingClaim: ""

  ## Vela server data Persistent Volume mount root path
  ## TODO: this may need to be a different path for Vela. For now, include in database address
  ##
  mountPath: /data

  ## Vela server data Persistent Volume size
  ## TODO: validate this for vela
  ##
  size: 8Gi

  ## Vela server data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""

  ## Vela server data Persistent Volume Binding Mode
  ## If defined, volumeMode: <volumeMode>
  ## If empty (the default) or set to null, no volumeBindingMode spec is
  ## set, choosing the default mode.
  ##
  volumeMode: ""

  ## Subdirectory of Vela server data Persistent Volume to mount
  ## Useful if the volume's root directory is not empty
  ##
  subPath: ""

## If persistentVolume.enabled is set to false, vela-server will mount an emptyDir instead of
## a PVC for any state that it needs to persist.
##
emptyDir:
  ## Total space to request for the emptyDir. An empty value here means no limit.
  sizeLimit: ""

## If you'd like to provide your own Kubernetes Secret object instead of passing your values
## in un-encrypted, pass in the name of a created + populated Secret in the same Namespace
## as the Vela server. All secrets within this configmap will be mounted as environment
## variables, with each key/value mapping to a corresponding environment variable on the
## Vela server.
##
extraSecretNamesForEnvFrom: []
# - my-vela-secrets

## The keys within the "env" map are mounted as environment variables on the Vela server pod.
##
env:
  ## Vela Server vars
  ## Ref: https://github.com/go-vela/server/blob/master/cmd/vela-server/main.go

  ## REQUIRED!
  ## Set the secret secret token that the Vela server and its workers will use
  ## to authenticate. This is commented out in order to leave you the ability to set the
  ## key via a separately provisioned secret (see existingSecretName above).
  ## Usage: secret used for server <-> worker communication
  ##
  # VELA_SECRET:

  ## REQUIRED!
  ## This address gets sent to Source provider (eg Github) to configure repo webhooks.
  ## As such, it must be an address that is accessible to the Source provider.
  ## Usage: server address as a fully qualified url (<scheme>://<host>)
  ##
  VELA_ADDR: https://chart-example.local

  ## vela-server will listen on this port (using all addresses similar to 0.0.0.0:<port>)
  ## Usage: server port for the API to listen on
  ##
  VELA_PORT: "8080"

  ## The UI's web address is used when creating comments/metadata with links back to
  ## logs or other build info.
  ## Usage: web ui address as a fully qualified url (<scheme>://<host>)
  ##
  # VELA_WEBUI_ADDR: https://chart-ui-example.local

  ## You need to configure the queue that the server will use to pass work to the workers.
  ##
  ## REQUIRED!
  ## Options: redis (stubs: kafka)
  ## Usage: driver to be used for the queue
  VELA_QUEUE_DRIVER: redis
  ##
  ## REQUIRED!
  ## Make sure to adjust this if your redis host/cluster is not accessible on host "redis"
  ## Usage: fully qualified url (<scheme>://<host>) for the queue
  # VELA_QUEUE_ADDR: redis://redis:6379
  ##
  ## Usage: enables connecting to a queue cluster
  # VELA_QUEUE_CLUSTER:
  ##
  ## Usage: list of routes (channels/topics) to publish builds
  # VELA_QUEUE_ROUTES: "vela"
  ##
  ## Usage: timeout for requests that pop items off the queue
  # VELA_QUEUE_POP_TIMEOUT: "60s"

  ## If you'd like to use a DB other than SQLite (the default), set a driver + addr here.
  ##
  ## REQUIRED!
  ## Options: sqlite3, postgres
  ## Usage: driver to be used for the database system
  VELA_DATABASE_DRIVER: "sqlite3"
  ##
  ## REQUIRED!
  ## Usage: fully qualified url (<scheme>://<host>) for the database
  ## For sqlite, see the URI Filename examples section in: https://www.sqlite.org/c3ref/open.html
  VELA_DATABASE_ADDR: "file:///data/vela.sqlite"

  ## REQUIRED!
  ## Usage: AES-256 key for encrypting and decrypting values in the database
  # VELA_DATABASE_ENCRYPTION_KEY:

  ## SCM provider configuration

  ## REQUIRED!
  ## Usage: OAuth client id from version control system
  # VELA_SCM_CLIENT:
  ##
  ## REQUIRED!
  ## Usage: OAuth client secret from version control system
  # VELA_SCM_SECRET:
  ##
  ## Options: github (stubs: gitlab)
  ## Usage: driver to be used for the version control system (only github supported for now)
  # VELA_SCM_DRIVER: "github"
  ##
  ## Usage: fully qualified url (<scheme>://<host>) for the version control system
  # VELA_SCM_ADDR: "https://github.com"
  ##
  ## Usage: context for commit status in version control system
  # VELA_SCM_CONTEXT: continuous-integration/vela
  ##
  ## Usage: OAuth scopes to be used for the version control system
  # VELA_SCM_SCOPES: "repo,repo:status,user:email,read:user,read:org"

  ## The Compiler has a separate set of Github credentials for retrieving templates.

  ## Usage: github compiler driver
  # VELA_COMPILER_GITHUB:
  ##
  ## Usage: github url, used by compiler, for pulling registry templates
  # VELA_COMPILER_GITHUB_URL:
  ##
  ## Usage: github token, used by compiler, for pulling registry templates
  # VELA_COMPILER_GITHUB_TOKEN:

  ## Other misc Vela Database settings

  ## Usage: maximum number of open connections to the database
  # VELA_DATABASE_CONNECTION_OPEN: "0"
  ##
  ## Usage: maximum number of idle connections to the database
  # VELA_DATABASE_CONNECTION_IDLE: "2"
  ##
  ## Usage: duration of time a connection may be reused for the database
  # VELA_DATABASE_CONNECTION_LIFE: "30m"
  ##
  ## Usage: level of compression for logs stored in the database
  # VELA_DATABASE_COMPRESSION_LEVEL: "3"
  ##
  ## Usage: enables skipping the creation of tables and indexes in the database
  # VELA_DATABASE_SKIP_CREATION:

  ## Build Limits

  ## Usage: override default concurrent build limit
  # VELA_DEFAULT_BUILD_LIMIT: "10"
  ##
  ## Usage: override max concurrent build limit
  # VELA_MAX_BUILD_LIMIT: "30"
  ##
  ## Usage: override default build timeout (minutes)
  # VELA_DEFAULT_BUILD_TIMEOUT: "30"

  ## Other misc Vela server settings

  ## Usage: set log level - options: (trace|debug|info|warn|error|fatal|panic)
  # VELA_LOG_LEVEL: info
  ##
  ## Usage: determines whether or not webhook validation is disabled.  useful for local development.
  # VELA_DISABLE_WEBHOOK_VALIDATION: "false"
  ##
  ## Usage: determines whether or not use cookies with secure flag set.  useful for testing.
  # VELA_ENABLE_SECURE_COOKIE: "false"
  ##
  ## Usage: sets the duration of the access token
  # VELA_ACCESS_TOKEN_DURATION: "15m"
  ##
  ## Usage: sets the duration of the refresh token
  # VELA_REFRESH_TOKEN_DURATION: "8h"
  ##
  ## Usage: interval at which workers will show as active within the /metrics endpoint
  # VELA_WORKER_ACTIVE_INTERVAL: "5m"

  ## Compiler Modification service (to modify pipelines)

  ## Usage: modification address, used by compiler, endpoint to send pipeline for modification
  # VELA_MODIFICATION_ADDR:
  ##
  ## Usage: modification secret, used by compiler, secret to allow connectivity between compiler and modification endpoint
  # VELA_MODIFICATION_SECRET:
  ##
  ## Usage: modification timeout, used by compiler, duration that the modification http request will timeout after
  # VELA_MODIFICATION_TIMEOUT: "8s"
  ##
  ## Usage: modification retries, used by compiler, number of http requires that the modification http request will fail after
  # VELA_MODIFICATION_RETRIES: "5"

  ## Vela Secrets using Vault

  ## Usage: enables the vault secret driver
  # VELA_SECRET_VAULT:
  ##
  ## Usage: fully qualified url (<scheme>://<host>) for the vault system
  # VELA_SECRET_VAULT_ADDR:
  ##
  ## Usage: authentication method used to obtain token from vault system
  # VELA_SECRET_VAULT_AUTH_METHOD:
  ##
  ## Usage: vault role used to connect to the auth/aws/login endpoint
  # VELA_SECRET_VAULT_AWS_ROLE:
  ##
  ## Usage: prefix for k/v secrets in vault system e.g. secret/data/<prefix>/<path>
  # VELA_SECRET_VAULT_PREFIX:
  ##
  ## Usage: frequency which the vault token should be renewed
  # VELA_SECRET_VAULT_RENEWAL: "30m"
  ##
  ## Usage: token used to access vault system
  # VELA_SECRET_VAULT_TOKEN:
  ##
  ## Usage: version for the kv backend for the vault system
  # VELA_SECRET_VAULT_VERSION: "2"
